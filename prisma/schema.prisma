// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    vtubers       VTuber[] 
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model VTuber {
    id          String   @id @default(cuid())
    userId      String  
    name        String  @unique
    bio         String?
    image       String?
    color       String? // hex color #000000
    association Association[] // hololive, nijisanji, independent, hololive, holoEN 
    customLinks customLink[]
    socialLinks socialLink[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Association {
    id          String   @id @default(cuid())
    vtuberId    String
    name        String   @unique
    vtuber      VTuber   @relation(fields: [vtuberId], references: [id])

    @@index([vtuberId])
}

model customLink {
    id      String   @id @default(cuid())
    vtuberId String
    title    String
    description String?
    slug     String  @unique// vtu.bio/qwertyui
    url     String // the user's input
    vtuber  VTuber   @relation(fields: [vtuberId], references: [id], onDelete: Cascade)
    @@index([vtuberId])

}

model socialLink {
    id      String   @id @default(cuid())
    vtuberId String
    username String // @username
    slug     String @unique// randomly generate vtu.bio/hbwehif2u
    url     String // automatically generated
    provider String // twitter, youtube, twitch, bilibili, facebook, instagram, tiktok
    vtuber  VTuber   @relation(fields: [vtuberId], references: [id], onDelete: Cascade)

    @@index([vtuberId])

}